/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.nyu.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the LessonObjectives service. Represents a row in the &quot;nyyou_LessonObjectives&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.nyu.model.impl.LessonObjectivesModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.nyu.model.impl.LessonObjectivesImpl}.
 * </p>
 *
 * @author Allwins Rajaiah
 * @see LessonObjectives
 * @see com.nyu.model.impl.LessonObjectivesImpl
 * @see com.nyu.model.impl.LessonObjectivesModelImpl
 * @generated
 */
public interface LessonObjectivesModel extends BaseModel<LessonObjectives> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a lesson objectives model instance should use the {@link LessonObjectives} interface instead.
	 */

	/**
	 * Returns the primary key of this lesson objectives.
	 *
	 * @return the primary key of this lesson objectives
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this lesson objectives.
	 *
	 * @param primaryKey the primary key of this lesson objectives
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the ID of this lesson objectives.
	 *
	 * @return the ID of this lesson objectives
	 */
	public long getId();

	/**
	 * Sets the ID of this lesson objectives.
	 *
	 * @param id the ID of this lesson objectives
	 */
	public void setId(long id);

	/**
	 * Returns the lesson ID of this lesson objectives.
	 *
	 * @return the lesson ID of this lesson objectives
	 */
	public long getLessonId();

	/**
	 * Sets the lesson ID of this lesson objectives.
	 *
	 * @param lessonId the lesson ID of this lesson objectives
	 */
	public void setLessonId(long lessonId);

	/**
	 * Returns the objective of this lesson objectives.
	 *
	 * @return the objective of this lesson objectives
	 */
	public String getObjective();

	/**
	 * Returns the localized objective of this lesson objectives in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized objective of this lesson objectives
	 */
	@AutoEscape
	public String getObjective(Locale locale);

	/**
	 * Returns the localized objective of this lesson objectives in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized objective of this lesson objectives. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getObjective(Locale locale, boolean useDefault);

	/**
	 * Returns the localized objective of this lesson objectives in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized objective of this lesson objectives
	 */
	@AutoEscape
	public String getObjective(String languageId);

	/**
	 * Returns the localized objective of this lesson objectives in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized objective of this lesson objectives
	 */
	@AutoEscape
	public String getObjective(String languageId, boolean useDefault);

	@AutoEscape
	public String getObjectiveCurrentLanguageId();

	@AutoEscape
	public String getObjectiveCurrentValue();

	/**
	 * Returns a map of the locales and localized objectives of this lesson objectives.
	 *
	 * @return the locales and localized objectives of this lesson objectives
	 */
	public Map<Locale, String> getObjectiveMap();

	/**
	 * Sets the objective of this lesson objectives.
	 *
	 * @param objective the objective of this lesson objectives
	 */
	public void setObjective(String objective);

	/**
	 * Sets the localized objective of this lesson objectives in the language.
	 *
	 * @param objective the localized objective of this lesson objectives
	 * @param locale the locale of the language
	 */
	public void setObjective(String objective, Locale locale);

	/**
	 * Sets the localized objective of this lesson objectives in the language, and sets the default locale.
	 *
	 * @param objective the localized objective of this lesson objectives
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setObjective(String objective, Locale locale,
		Locale defaultLocale);

	public void setObjectiveCurrentLanguageId(String languageId);

	/**
	 * Sets the localized objectives of this lesson objectives from the map of locales and localized objectives.
	 *
	 * @param objectiveMap the locales and localized objectives of this lesson objectives
	 */
	public void setObjectiveMap(Map<Locale, String> objectiveMap);

	/**
	 * Sets the localized objectives of this lesson objectives from the map of locales and localized objectives, and sets the default locale.
	 *
	 * @param objectiveMap the locales and localized objectives of this lesson objectives
	 * @param defaultLocale the default locale
	 */
	public void setObjectiveMap(Map<Locale, String> objectiveMap,
		Locale defaultLocale);

	/**
	 * Returns the modified date of this lesson objectives.
	 *
	 * @return the modified date of this lesson objectives
	 */
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this lesson objectives.
	 *
	 * @param modifiedDate the modified date of this lesson objectives
	 */
	public void setModifiedDate(Date modifiedDate);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public String[] getAvailableLanguageIds();

	public String getDefaultLanguageId();

	public void prepareLocalizedFieldsForImport() throws LocaleException;

	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(LessonObjectives lessonObjectives);

	@Override
	public int hashCode();

	@Override
	public CacheModel<LessonObjectives> toCacheModel();

	@Override
	public LessonObjectives toEscapedModel();

	@Override
	public LessonObjectives toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}