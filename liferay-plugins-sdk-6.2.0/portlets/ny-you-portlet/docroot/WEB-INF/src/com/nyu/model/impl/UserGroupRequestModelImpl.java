/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.nyu.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.nyu.model.UserGroupRequest;
import com.nyu.model.UserGroupRequestModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the UserGroupRequest service. Represents a row in the &quot;nyyou_UserGroupRequest&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.nyu.model.UserGroupRequestModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserGroupRequestImpl}.
 * </p>
 *
 * @author Allwins Rajaiah
 * @see UserGroupRequestImpl
 * @see com.nyu.model.UserGroupRequest
 * @see com.nyu.model.UserGroupRequestModel
 * @generated
 */
public class UserGroupRequestModelImpl extends BaseModelImpl<UserGroupRequest>
	implements UserGroupRequestModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user group request model instance should use the {@link com.nyu.model.UserGroupRequest} interface instead.
	 */
	public static final String TABLE_NAME = "nyyou_UserGroupRequest";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "userGroupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userGroupOwner", Types.BIGINT },
			{ "requestDate", Types.TIMESTAMP },
			{ "requestedBy", Types.BIGINT },
			{ "status", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table nyyou_UserGroupRequest (id_ LONG not null primary key,userGroupId LONG,companyId LONG,groupId LONG,userGroupOwner LONG,requestDate DATE null,requestedBy LONG,status VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table nyyou_UserGroupRequest";
	public static final String ORDER_BY_JPQL = " ORDER BY userGroupRequest.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY nyyou_UserGroupRequest.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.nyu.model.UserGroupRequest"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.nyu.model.UserGroupRequest"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.nyu.model.UserGroupRequest"),
			true);
	public static long REQUESTEDBY_COLUMN_BITMASK = 1L;
	public static long STATUS_COLUMN_BITMASK = 2L;
	public static long USERGROUPID_COLUMN_BITMASK = 4L;
	public static long ID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.nyu.model.UserGroupRequest"));

	public UserGroupRequestModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UserGroupRequest.class;
	}

	@Override
	public String getModelClassName() {
		return UserGroupRequest.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("userGroupId", getUserGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userGroupOwner", getUserGroupOwner());
		attributes.put("requestDate", getRequestDate());
		attributes.put("requestedBy", getRequestedBy());
		attributes.put("status", getStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long userGroupId = (Long)attributes.get("userGroupId");

		if (userGroupId != null) {
			setUserGroupId(userGroupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userGroupOwner = (Long)attributes.get("userGroupOwner");

		if (userGroupOwner != null) {
			setUserGroupOwner(userGroupOwner);
		}

		Date requestDate = (Date)attributes.get("requestDate");

		if (requestDate != null) {
			setRequestDate(requestDate);
		}

		Long requestedBy = (Long)attributes.get("requestedBy");

		if (requestedBy != null) {
			setRequestedBy(requestedBy);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getUserGroupId() {
		return _userGroupId;
	}

	@Override
	public void setUserGroupId(long userGroupId) {
		_columnBitmask |= USERGROUPID_COLUMN_BITMASK;

		if (!_setOriginalUserGroupId) {
			_setOriginalUserGroupId = true;

			_originalUserGroupId = _userGroupId;
		}

		_userGroupId = userGroupId;
	}

	public long getOriginalUserGroupId() {
		return _originalUserGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getUserGroupOwner() {
		return _userGroupOwner;
	}

	@Override
	public void setUserGroupOwner(long userGroupOwner) {
		_userGroupOwner = userGroupOwner;
	}

	@Override
	public Date getRequestDate() {
		return _requestDate;
	}

	@Override
	public void setRequestDate(Date requestDate) {
		_requestDate = requestDate;
	}

	@Override
	public long getRequestedBy() {
		return _requestedBy;
	}

	@Override
	public void setRequestedBy(long requestedBy) {
		_columnBitmask |= REQUESTEDBY_COLUMN_BITMASK;

		if (!_setOriginalRequestedBy) {
			_setOriginalRequestedBy = true;

			_originalRequestedBy = _requestedBy;
		}

		_requestedBy = requestedBy;
	}

	public long getOriginalRequestedBy() {
		return _originalRequestedBy;
	}

	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (_originalStatus == null) {
			_originalStatus = _status;
		}

		_status = status;
	}

	public String getOriginalStatus() {
		return GetterUtil.getString(_originalStatus);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			UserGroupRequest.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserGroupRequest toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UserGroupRequest)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserGroupRequestImpl userGroupRequestImpl = new UserGroupRequestImpl();

		userGroupRequestImpl.setId(getId());
		userGroupRequestImpl.setUserGroupId(getUserGroupId());
		userGroupRequestImpl.setCompanyId(getCompanyId());
		userGroupRequestImpl.setGroupId(getGroupId());
		userGroupRequestImpl.setUserGroupOwner(getUserGroupOwner());
		userGroupRequestImpl.setRequestDate(getRequestDate());
		userGroupRequestImpl.setRequestedBy(getRequestedBy());
		userGroupRequestImpl.setStatus(getStatus());

		userGroupRequestImpl.resetOriginalValues();

		return userGroupRequestImpl;
	}

	@Override
	public int compareTo(UserGroupRequest userGroupRequest) {
		long primaryKey = userGroupRequest.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserGroupRequest)) {
			return false;
		}

		UserGroupRequest userGroupRequest = (UserGroupRequest)obj;

		long primaryKey = userGroupRequest.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		UserGroupRequestModelImpl userGroupRequestModelImpl = this;

		userGroupRequestModelImpl._originalUserGroupId = userGroupRequestModelImpl._userGroupId;

		userGroupRequestModelImpl._setOriginalUserGroupId = false;

		userGroupRequestModelImpl._originalRequestedBy = userGroupRequestModelImpl._requestedBy;

		userGroupRequestModelImpl._setOriginalRequestedBy = false;

		userGroupRequestModelImpl._originalStatus = userGroupRequestModelImpl._status;

		userGroupRequestModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UserGroupRequest> toCacheModel() {
		UserGroupRequestCacheModel userGroupRequestCacheModel = new UserGroupRequestCacheModel();

		userGroupRequestCacheModel.id = getId();

		userGroupRequestCacheModel.userGroupId = getUserGroupId();

		userGroupRequestCacheModel.companyId = getCompanyId();

		userGroupRequestCacheModel.groupId = getGroupId();

		userGroupRequestCacheModel.userGroupOwner = getUserGroupOwner();

		Date requestDate = getRequestDate();

		if (requestDate != null) {
			userGroupRequestCacheModel.requestDate = requestDate.getTime();
		}
		else {
			userGroupRequestCacheModel.requestDate = Long.MIN_VALUE;
		}

		userGroupRequestCacheModel.requestedBy = getRequestedBy();

		userGroupRequestCacheModel.status = getStatus();

		String status = userGroupRequestCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			userGroupRequestCacheModel.status = null;
		}

		return userGroupRequestCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", userGroupId=");
		sb.append(getUserGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userGroupOwner=");
		sb.append(getUserGroupOwner());
		sb.append(", requestDate=");
		sb.append(getRequestDate());
		sb.append(", requestedBy=");
		sb.append(getRequestedBy());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.nyu.model.UserGroupRequest");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userGroupId</column-name><column-value><![CDATA[");
		sb.append(getUserGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userGroupOwner</column-name><column-value><![CDATA[");
		sb.append(getUserGroupOwner());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestDate</column-name><column-value><![CDATA[");
		sb.append(getRequestDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestedBy</column-name><column-value><![CDATA[");
		sb.append(getRequestedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = UserGroupRequest.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			UserGroupRequest.class
		};
	private long _id;
	private long _userGroupId;
	private long _originalUserGroupId;
	private boolean _setOriginalUserGroupId;
	private long _companyId;
	private long _groupId;
	private long _userGroupOwner;
	private Date _requestDate;
	private long _requestedBy;
	private long _originalRequestedBy;
	private boolean _setOriginalRequestedBy;
	private String _status;
	private String _originalStatus;
	private long _columnBitmask;
	private UserGroupRequest _escapedModel;
}