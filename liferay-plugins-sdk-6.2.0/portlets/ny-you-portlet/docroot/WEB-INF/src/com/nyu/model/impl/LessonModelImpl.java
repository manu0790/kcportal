/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.nyu.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.nyu.model.Lesson;
import com.nyu.model.LessonModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the Lesson service. Represents a row in the &quot;nyyou_Lesson&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.nyu.model.LessonModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LessonImpl}.
 * </p>
 *
 * @author Allwins Rajaiah
 * @see LessonImpl
 * @see com.nyu.model.Lesson
 * @see com.nyu.model.LessonModel
 * @generated
 */
public class LessonModelImpl extends BaseModelImpl<Lesson>
	implements LessonModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a lesson model instance should use the {@link com.nyu.model.Lesson} interface instead.
	 */
	public static final String TABLE_NAME = "nyyou_Lesson";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "lessonId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "lessonName", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "author", Types.BIGINT },
			{ "courseId", Types.VARCHAR },
			{ "appreciatedUserIds", Types.VARCHAR },
			{ "appreciateCount", Types.INTEGER },
			{ "uploadedTime", Types.TIMESTAMP },
			{ "uploadedById", Types.BIGINT },
			{ "uploadedByName", Types.VARCHAR },
			{ "lessonNote", Types.VARCHAR },
			{ "status", Types.VARCHAR },
			{ "requestLessonId", Types.BIGINT },
			{ "lessonPrivacy", Types.VARCHAR },
			{ "featured_", Types.BOOLEAN },
			{ "creator", Types.VARCHAR },
			{ "secondaryAuthor", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "createBy", Types.BIGINT },
			{ "updatedDate", Types.TIMESTAMP },
			{ "updatedBy", Types.BIGINT },
			{ "permission", Types.VARCHAR },
			{ "markedAs", Types.VARCHAR },
			{ "markedBy", Types.BIGINT },
			{ "markedContent", Types.VARCHAR },
			{ "currentAuthor", Types.BIGINT },
			{ "shareWithProfile", Types.BIGINT },
			{ "publishWithProfile", Types.BIGINT },
			{ "publishedProfile", Types.VARCHAR },
			{ "version", Types.DOUBLE },
			{ "lessonStatus", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table nyyou_Lesson (uuid_ VARCHAR(75) null,lessonId LONG not null primary key IDENTITY,companyId LONG,groupId LONG,lessonName STRING null,description STRING null,author LONG,courseId VARCHAR(75) null,appreciatedUserIds TEXT null,appreciateCount INTEGER,uploadedTime DATE null,uploadedById LONG,uploadedByName VARCHAR(75) null,lessonNote TEXT null,status VARCHAR(75) null,requestLessonId LONG,lessonPrivacy VARCHAR(75) null,featured_ BOOLEAN,creator STRING null,secondaryAuthor VARCHAR(75) null,createDate DATE null,createBy LONG,updatedDate DATE null,updatedBy LONG,permission VARCHAR(75) null,markedAs VARCHAR(75) null,markedBy LONG,markedContent VARCHAR(500) null,currentAuthor LONG,shareWithProfile LONG,publishWithProfile LONG,publishedProfile VARCHAR(75) null,version DOUBLE,lessonStatus INTEGER,statusByUserId LONG,statusDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table nyyou_Lesson";
	public static final String ORDER_BY_JPQL = " ORDER BY lesson.uploadedTime DESC";
	public static final String ORDER_BY_SQL = " ORDER BY nyyou_Lesson.uploadedTime DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.nyu.model.Lesson"), true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.nyu.model.Lesson"), true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.nyu.model.Lesson"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long CURRENTAUTHOR_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;
	public static long LESSONID_COLUMN_BITMASK = 8L;
	public static long LESSONNAME_COLUMN_BITMASK = 16L;
	public static long LESSONPRIVACY_COLUMN_BITMASK = 32L;
	public static long LESSONSTATUS_COLUMN_BITMASK = 64L;
	public static long MARKEDAS_COLUMN_BITMASK = 128L;
	public static long STATUS_COLUMN_BITMASK = 256L;
	public static long UUID_COLUMN_BITMASK = 512L;
	public static long UPLOADEDTIME_COLUMN_BITMASK = 1024L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.nyu.model.Lesson"));

	public LessonModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _lessonId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLessonId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _lessonId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Lesson.class;
	}

	@Override
	public String getModelClassName() {
		return Lesson.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("lessonId", getLessonId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("lessonName", getLessonName());
		attributes.put("description", getDescription());
		attributes.put("author", getAuthor());
		attributes.put("courseId", getCourseId());
		attributes.put("appreciatedUserIds", getAppreciatedUserIds());
		attributes.put("appreciateCount", getAppreciateCount());
		attributes.put("uploadedTime", getUploadedTime());
		attributes.put("uploadedById", getUploadedById());
		attributes.put("uploadedByName", getUploadedByName());
		attributes.put("lessonNote", getLessonNote());
		attributes.put("status", getStatus());
		attributes.put("requestLessonId", getRequestLessonId());
		attributes.put("lessonPrivacy", getLessonPrivacy());
		attributes.put("featured", getFeatured());
		attributes.put("creator", getCreator());
		attributes.put("secondaryAuthor", getSecondaryAuthor());
		attributes.put("createDate", getCreateDate());
		attributes.put("createBy", getCreateBy());
		attributes.put("updatedDate", getUpdatedDate());
		attributes.put("updatedBy", getUpdatedBy());
		attributes.put("permission", getPermission());
		attributes.put("markedAs", getMarkedAs());
		attributes.put("markedBy", getMarkedBy());
		attributes.put("markedContent", getMarkedContent());
		attributes.put("currentAuthor", getCurrentAuthor());
		attributes.put("shareWithProfile", getShareWithProfile());
		attributes.put("publishWithProfile", getPublishWithProfile());
		attributes.put("publishedProfile", getPublishedProfile());
		attributes.put("version", getVersion());
		attributes.put("lessonStatus", getLessonStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusDate", getStatusDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long lessonId = (Long)attributes.get("lessonId");

		if (lessonId != null) {
			setLessonId(lessonId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		String lessonName = (String)attributes.get("lessonName");

		if (lessonName != null) {
			setLessonName(lessonName);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Long author = (Long)attributes.get("author");

		if (author != null) {
			setAuthor(author);
		}

		String courseId = (String)attributes.get("courseId");

		if (courseId != null) {
			setCourseId(courseId);
		}

		String appreciatedUserIds = (String)attributes.get("appreciatedUserIds");

		if (appreciatedUserIds != null) {
			setAppreciatedUserIds(appreciatedUserIds);
		}

		Integer appreciateCount = (Integer)attributes.get("appreciateCount");

		if (appreciateCount != null) {
			setAppreciateCount(appreciateCount);
		}

		Date uploadedTime = (Date)attributes.get("uploadedTime");

		if (uploadedTime != null) {
			setUploadedTime(uploadedTime);
		}

		Long uploadedById = (Long)attributes.get("uploadedById");

		if (uploadedById != null) {
			setUploadedById(uploadedById);
		}

		String uploadedByName = (String)attributes.get("uploadedByName");

		if (uploadedByName != null) {
			setUploadedByName(uploadedByName);
		}

		String lessonNote = (String)attributes.get("lessonNote");

		if (lessonNote != null) {
			setLessonNote(lessonNote);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long requestLessonId = (Long)attributes.get("requestLessonId");

		if (requestLessonId != null) {
			setRequestLessonId(requestLessonId);
		}

		String lessonPrivacy = (String)attributes.get("lessonPrivacy");

		if (lessonPrivacy != null) {
			setLessonPrivacy(lessonPrivacy);
		}

		Boolean featured = (Boolean)attributes.get("featured");

		if (featured != null) {
			setFeatured(featured);
		}

		String creator = (String)attributes.get("creator");

		if (creator != null) {
			setCreator(creator);
		}

		String secondaryAuthor = (String)attributes.get("secondaryAuthor");

		if (secondaryAuthor != null) {
			setSecondaryAuthor(secondaryAuthor);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long createBy = (Long)attributes.get("createBy");

		if (createBy != null) {
			setCreateBy(createBy);
		}

		Date updatedDate = (Date)attributes.get("updatedDate");

		if (updatedDate != null) {
			setUpdatedDate(updatedDate);
		}

		Long updatedBy = (Long)attributes.get("updatedBy");

		if (updatedBy != null) {
			setUpdatedBy(updatedBy);
		}

		String permission = (String)attributes.get("permission");

		if (permission != null) {
			setPermission(permission);
		}

		String markedAs = (String)attributes.get("markedAs");

		if (markedAs != null) {
			setMarkedAs(markedAs);
		}

		Long markedBy = (Long)attributes.get("markedBy");

		if (markedBy != null) {
			setMarkedBy(markedBy);
		}

		String markedContent = (String)attributes.get("markedContent");

		if (markedContent != null) {
			setMarkedContent(markedContent);
		}

		Long currentAuthor = (Long)attributes.get("currentAuthor");

		if (currentAuthor != null) {
			setCurrentAuthor(currentAuthor);
		}

		Long shareWithProfile = (Long)attributes.get("shareWithProfile");

		if (shareWithProfile != null) {
			setShareWithProfile(shareWithProfile);
		}

		Long publishWithProfile = (Long)attributes.get("publishWithProfile");

		if (publishWithProfile != null) {
			setPublishWithProfile(publishWithProfile);
		}

		String publishedProfile = (String)attributes.get("publishedProfile");

		if (publishedProfile != null) {
			setPublishedProfile(publishedProfile);
		}

		Double version = (Double)attributes.get("version");

		if (version != null) {
			setVersion(version);
		}

		Integer lessonStatus = (Integer)attributes.get("lessonStatus");

		if (lessonStatus != null) {
			setLessonStatus(lessonStatus);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getLessonId() {
		return _lessonId;
	}

	@Override
	public void setLessonId(long lessonId) {
		_columnBitmask |= LESSONID_COLUMN_BITMASK;

		if (!_setOriginalLessonId) {
			_setOriginalLessonId = true;

			_originalLessonId = _lessonId;
		}

		_lessonId = lessonId;
	}

	public long getOriginalLessonId() {
		return _originalLessonId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public String getLessonName() {
		if (_lessonName == null) {
			return StringPool.BLANK;
		}
		else {
			return _lessonName;
		}
	}

	@Override
	public String getLessonName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getLessonName(languageId);
	}

	@Override
	public String getLessonName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getLessonName(languageId, useDefault);
	}

	@Override
	public String getLessonName(String languageId) {
		return LocalizationUtil.getLocalization(getLessonName(), languageId);
	}

	@Override
	public String getLessonName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getLessonName(), languageId,
			useDefault);
	}

	@Override
	public String getLessonNameCurrentLanguageId() {
		return _lessonNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getLessonNameCurrentValue() {
		Locale locale = getLocale(_lessonNameCurrentLanguageId);

		return getLessonName(locale);
	}

	@Override
	public Map<Locale, String> getLessonNameMap() {
		return LocalizationUtil.getLocalizationMap(getLessonName());
	}

	@Override
	public void setLessonName(String lessonName) {
		_columnBitmask |= LESSONNAME_COLUMN_BITMASK;

		if (_originalLessonName == null) {
			_originalLessonName = _lessonName;
		}

		_lessonName = lessonName;
	}

	@Override
	public void setLessonName(String lessonName, Locale locale) {
		setLessonName(lessonName, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setLessonName(String lessonName, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(lessonName)) {
			setLessonName(LocalizationUtil.updateLocalization(getLessonName(),
					"LessonName", lessonName, languageId, defaultLanguageId));
		}
		else {
			setLessonName(LocalizationUtil.removeLocalization(getLessonName(),
					"LessonName", languageId));
		}
	}

	@Override
	public void setLessonNameCurrentLanguageId(String languageId) {
		_lessonNameCurrentLanguageId = languageId;
	}

	@Override
	public void setLessonNameMap(Map<Locale, String> lessonNameMap) {
		setLessonNameMap(lessonNameMap, LocaleUtil.getDefault());
	}

	@Override
	public void setLessonNameMap(Map<Locale, String> lessonNameMap,
		Locale defaultLocale) {
		if (lessonNameMap == null) {
			return;
		}

		setLessonName(LocalizationUtil.updateLocalization(lessonNameMap,
				getLessonName(), "LessonName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	public String getOriginalLessonName() {
		return GetterUtil.getString(_originalLessonName);
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	@Override
	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	@Override
	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	@Override
	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getDescription(), languageId,
			useDefault);
	}

	@Override
	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	@Override
	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setDescription(String description, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	@Override
	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getDefault());
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap,
		Locale defaultLocale) {
		if (descriptionMap == null) {
			return;
		}

		setDescription(LocalizationUtil.updateLocalization(descriptionMap,
				getDescription(), "Description",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public long getAuthor() {
		return _author;
	}

	@Override
	public void setAuthor(long author) {
		_author = author;
	}

	@Override
	public String getCourseId() {
		if (_courseId == null) {
			return StringPool.BLANK;
		}
		else {
			return _courseId;
		}
	}

	@Override
	public void setCourseId(String courseId) {
		_courseId = courseId;
	}

	@Override
	public String getAppreciatedUserIds() {
		if (_appreciatedUserIds == null) {
			return StringPool.BLANK;
		}
		else {
			return _appreciatedUserIds;
		}
	}

	@Override
	public void setAppreciatedUserIds(String appreciatedUserIds) {
		_appreciatedUserIds = appreciatedUserIds;
	}

	@Override
	public int getAppreciateCount() {
		return _appreciateCount;
	}

	@Override
	public void setAppreciateCount(int appreciateCount) {
		_appreciateCount = appreciateCount;
	}

	@Override
	public Date getUploadedTime() {
		return _uploadedTime;
	}

	@Override
	public void setUploadedTime(Date uploadedTime) {
		_columnBitmask = -1L;

		_uploadedTime = uploadedTime;
	}

	@Override
	public long getUploadedById() {
		return _uploadedById;
	}

	@Override
	public void setUploadedById(long uploadedById) {
		_uploadedById = uploadedById;
	}

	@Override
	public String getUploadedByName() {
		if (_uploadedByName == null) {
			return StringPool.BLANK;
		}
		else {
			return _uploadedByName;
		}
	}

	@Override
	public void setUploadedByName(String uploadedByName) {
		_uploadedByName = uploadedByName;
	}

	@Override
	public String getLessonNote() {
		if (_lessonNote == null) {
			return StringPool.BLANK;
		}
		else {
			return _lessonNote;
		}
	}

	@Override
	public void setLessonNote(String lessonNote) {
		_lessonNote = lessonNote;
	}

	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (_originalStatus == null) {
			_originalStatus = _status;
		}

		_status = status;
	}

	public String getOriginalStatus() {
		return GetterUtil.getString(_originalStatus);
	}

	@Override
	public long getRequestLessonId() {
		return _requestLessonId;
	}

	@Override
	public void setRequestLessonId(long requestLessonId) {
		_requestLessonId = requestLessonId;
	}

	@Override
	public String getLessonPrivacy() {
		if (_lessonPrivacy == null) {
			return StringPool.BLANK;
		}
		else {
			return _lessonPrivacy;
		}
	}

	@Override
	public void setLessonPrivacy(String lessonPrivacy) {
		_columnBitmask |= LESSONPRIVACY_COLUMN_BITMASK;

		if (_originalLessonPrivacy == null) {
			_originalLessonPrivacy = _lessonPrivacy;
		}

		_lessonPrivacy = lessonPrivacy;
	}

	public String getOriginalLessonPrivacy() {
		return GetterUtil.getString(_originalLessonPrivacy);
	}

	@Override
	public boolean getFeatured() {
		return _featured;
	}

	@Override
	public boolean isFeatured() {
		return _featured;
	}

	@Override
	public void setFeatured(boolean featured) {
		_featured = featured;
	}

	@Override
	public String getCreator() {
		if (_creator == null) {
			return StringPool.BLANK;
		}
		else {
			return _creator;
		}
	}

	@Override
	public String getCreator(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getCreator(languageId);
	}

	@Override
	public String getCreator(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getCreator(languageId, useDefault);
	}

	@Override
	public String getCreator(String languageId) {
		return LocalizationUtil.getLocalization(getCreator(), languageId);
	}

	@Override
	public String getCreator(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getCreator(), languageId,
			useDefault);
	}

	@Override
	public String getCreatorCurrentLanguageId() {
		return _creatorCurrentLanguageId;
	}

	@JSON
	@Override
	public String getCreatorCurrentValue() {
		Locale locale = getLocale(_creatorCurrentLanguageId);

		return getCreator(locale);
	}

	@Override
	public Map<Locale, String> getCreatorMap() {
		return LocalizationUtil.getLocalizationMap(getCreator());
	}

	@Override
	public void setCreator(String creator) {
		_creator = creator;
	}

	@Override
	public void setCreator(String creator, Locale locale) {
		setCreator(creator, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setCreator(String creator, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(creator)) {
			setCreator(LocalizationUtil.updateLocalization(getCreator(),
					"Creator", creator, languageId, defaultLanguageId));
		}
		else {
			setCreator(LocalizationUtil.removeLocalization(getCreator(),
					"Creator", languageId));
		}
	}

	@Override
	public void setCreatorCurrentLanguageId(String languageId) {
		_creatorCurrentLanguageId = languageId;
	}

	@Override
	public void setCreatorMap(Map<Locale, String> creatorMap) {
		setCreatorMap(creatorMap, LocaleUtil.getDefault());
	}

	@Override
	public void setCreatorMap(Map<Locale, String> creatorMap,
		Locale defaultLocale) {
		if (creatorMap == null) {
			return;
		}

		setCreator(LocalizationUtil.updateLocalization(creatorMap,
				getCreator(), "Creator", LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getSecondaryAuthor() {
		if (_secondaryAuthor == null) {
			return StringPool.BLANK;
		}
		else {
			return _secondaryAuthor;
		}
	}

	@Override
	public void setSecondaryAuthor(String secondaryAuthor) {
		_secondaryAuthor = secondaryAuthor;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public long getCreateBy() {
		return _createBy;
	}

	@Override
	public void setCreateBy(long createBy) {
		_createBy = createBy;
	}

	@Override
	public Date getUpdatedDate() {
		return _updatedDate;
	}

	@Override
	public void setUpdatedDate(Date updatedDate) {
		_updatedDate = updatedDate;
	}

	@Override
	public long getUpdatedBy() {
		return _updatedBy;
	}

	@Override
	public void setUpdatedBy(long updatedBy) {
		_updatedBy = updatedBy;
	}

	@Override
	public String getPermission() {
		if (_permission == null) {
			return StringPool.BLANK;
		}
		else {
			return _permission;
		}
	}

	@Override
	public void setPermission(String permission) {
		_permission = permission;
	}

	@Override
	public String getMarkedAs() {
		if (_markedAs == null) {
			return StringPool.BLANK;
		}
		else {
			return _markedAs;
		}
	}

	@Override
	public void setMarkedAs(String markedAs) {
		_columnBitmask |= MARKEDAS_COLUMN_BITMASK;

		if (_originalMarkedAs == null) {
			_originalMarkedAs = _markedAs;
		}

		_markedAs = markedAs;
	}

	public String getOriginalMarkedAs() {
		return GetterUtil.getString(_originalMarkedAs);
	}

	@Override
	public long getMarkedBy() {
		return _markedBy;
	}

	@Override
	public void setMarkedBy(long markedBy) {
		_markedBy = markedBy;
	}

	@Override
	public String getMarkedContent() {
		if (_markedContent == null) {
			return StringPool.BLANK;
		}
		else {
			return _markedContent;
		}
	}

	@Override
	public void setMarkedContent(String markedContent) {
		_markedContent = markedContent;
	}

	@Override
	public long getCurrentAuthor() {
		return _currentAuthor;
	}

	@Override
	public void setCurrentAuthor(long currentAuthor) {
		_columnBitmask |= CURRENTAUTHOR_COLUMN_BITMASK;

		if (!_setOriginalCurrentAuthor) {
			_setOriginalCurrentAuthor = true;

			_originalCurrentAuthor = _currentAuthor;
		}

		_currentAuthor = currentAuthor;
	}

	public long getOriginalCurrentAuthor() {
		return _originalCurrentAuthor;
	}

	@Override
	public long getShareWithProfile() {
		return _shareWithProfile;
	}

	@Override
	public void setShareWithProfile(long shareWithProfile) {
		_shareWithProfile = shareWithProfile;
	}

	@Override
	public long getPublishWithProfile() {
		return _publishWithProfile;
	}

	@Override
	public void setPublishWithProfile(long publishWithProfile) {
		_publishWithProfile = publishWithProfile;
	}

	@Override
	public String getPublishedProfile() {
		if (_publishedProfile == null) {
			return StringPool.BLANK;
		}
		else {
			return _publishedProfile;
		}
	}

	@Override
	public void setPublishedProfile(String publishedProfile) {
		_publishedProfile = publishedProfile;
	}

	@Override
	public double getVersion() {
		return _version;
	}

	@Override
	public void setVersion(double version) {
		_version = version;
	}

	@Override
	public int getLessonStatus() {
		return _lessonStatus;
	}

	@Override
	public void setLessonStatus(int lessonStatus) {
		_columnBitmask |= LESSONSTATUS_COLUMN_BITMASK;

		if (!_setOriginalLessonStatus) {
			_setOriginalLessonStatus = true;

			_originalLessonStatus = _lessonStatus;
		}

		_lessonStatus = lessonStatus;
	}

	public int getOriginalLessonStatus() {
		return _originalLessonStatus;
	}

	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
			_statusByUserUuid);
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
		_statusByUserUuid = statusByUserUuid;
	}

	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Lesson.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> lessonNameMap = getLessonNameMap();

		for (Map.Entry<Locale, String> entry : lessonNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> descriptionMap = getDescriptionMap();

		for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> creatorMap = getCreatorMap();

		for (Map.Entry<Locale, String> entry : creatorMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getLessonName();

		if (xml == null) {
			return StringPool.BLANK;
		}

		return LocalizationUtil.getDefaultLanguageId(xml);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String lessonName = getLessonName(defaultLocale);

		if (Validator.isNull(lessonName)) {
			setLessonName(getLessonName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setLessonName(getLessonName(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String description = getDescription(defaultLocale);

		if (Validator.isNull(description)) {
			setDescription(getDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDescription(getDescription(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String creator = getCreator(defaultLocale);

		if (Validator.isNull(creator)) {
			setCreator(getCreator(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setCreator(getCreator(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public Lesson toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Lesson)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LessonImpl lessonImpl = new LessonImpl();

		lessonImpl.setUuid(getUuid());
		lessonImpl.setLessonId(getLessonId());
		lessonImpl.setCompanyId(getCompanyId());
		lessonImpl.setGroupId(getGroupId());
		lessonImpl.setLessonName(getLessonName());
		lessonImpl.setDescription(getDescription());
		lessonImpl.setAuthor(getAuthor());
		lessonImpl.setCourseId(getCourseId());
		lessonImpl.setAppreciatedUserIds(getAppreciatedUserIds());
		lessonImpl.setAppreciateCount(getAppreciateCount());
		lessonImpl.setUploadedTime(getUploadedTime());
		lessonImpl.setUploadedById(getUploadedById());
		lessonImpl.setUploadedByName(getUploadedByName());
		lessonImpl.setLessonNote(getLessonNote());
		lessonImpl.setStatus(getStatus());
		lessonImpl.setRequestLessonId(getRequestLessonId());
		lessonImpl.setLessonPrivacy(getLessonPrivacy());
		lessonImpl.setFeatured(getFeatured());
		lessonImpl.setCreator(getCreator());
		lessonImpl.setSecondaryAuthor(getSecondaryAuthor());
		lessonImpl.setCreateDate(getCreateDate());
		lessonImpl.setCreateBy(getCreateBy());
		lessonImpl.setUpdatedDate(getUpdatedDate());
		lessonImpl.setUpdatedBy(getUpdatedBy());
		lessonImpl.setPermission(getPermission());
		lessonImpl.setMarkedAs(getMarkedAs());
		lessonImpl.setMarkedBy(getMarkedBy());
		lessonImpl.setMarkedContent(getMarkedContent());
		lessonImpl.setCurrentAuthor(getCurrentAuthor());
		lessonImpl.setShareWithProfile(getShareWithProfile());
		lessonImpl.setPublishWithProfile(getPublishWithProfile());
		lessonImpl.setPublishedProfile(getPublishedProfile());
		lessonImpl.setVersion(getVersion());
		lessonImpl.setLessonStatus(getLessonStatus());
		lessonImpl.setStatusByUserId(getStatusByUserId());
		lessonImpl.setStatusDate(getStatusDate());

		lessonImpl.resetOriginalValues();

		return lessonImpl;
	}

	@Override
	public int compareTo(Lesson lesson) {
		int value = 0;

		value = DateUtil.compareTo(getUploadedTime(), lesson.getUploadedTime());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Lesson)) {
			return false;
		}

		Lesson lesson = (Lesson)obj;

		long primaryKey = lesson.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LessonModelImpl lessonModelImpl = this;

		lessonModelImpl._originalUuid = lessonModelImpl._uuid;

		lessonModelImpl._originalLessonId = lessonModelImpl._lessonId;

		lessonModelImpl._setOriginalLessonId = false;

		lessonModelImpl._originalCompanyId = lessonModelImpl._companyId;

		lessonModelImpl._setOriginalCompanyId = false;

		lessonModelImpl._originalGroupId = lessonModelImpl._groupId;

		lessonModelImpl._setOriginalGroupId = false;

		lessonModelImpl._originalLessonName = lessonModelImpl._lessonName;

		lessonModelImpl._originalStatus = lessonModelImpl._status;

		lessonModelImpl._originalLessonPrivacy = lessonModelImpl._lessonPrivacy;

		lessonModelImpl._originalMarkedAs = lessonModelImpl._markedAs;

		lessonModelImpl._originalCurrentAuthor = lessonModelImpl._currentAuthor;

		lessonModelImpl._setOriginalCurrentAuthor = false;

		lessonModelImpl._originalLessonStatus = lessonModelImpl._lessonStatus;

		lessonModelImpl._setOriginalLessonStatus = false;

		lessonModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Lesson> toCacheModel() {
		LessonCacheModel lessonCacheModel = new LessonCacheModel();

		lessonCacheModel.uuid = getUuid();

		String uuid = lessonCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			lessonCacheModel.uuid = null;
		}

		lessonCacheModel.lessonId = getLessonId();

		lessonCacheModel.companyId = getCompanyId();

		lessonCacheModel.groupId = getGroupId();

		lessonCacheModel.lessonName = getLessonName();

		String lessonName = lessonCacheModel.lessonName;

		if ((lessonName != null) && (lessonName.length() == 0)) {
			lessonCacheModel.lessonName = null;
		}

		lessonCacheModel.description = getDescription();

		String description = lessonCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			lessonCacheModel.description = null;
		}

		lessonCacheModel.author = getAuthor();

		lessonCacheModel.courseId = getCourseId();

		String courseId = lessonCacheModel.courseId;

		if ((courseId != null) && (courseId.length() == 0)) {
			lessonCacheModel.courseId = null;
		}

		lessonCacheModel.appreciatedUserIds = getAppreciatedUserIds();

		String appreciatedUserIds = lessonCacheModel.appreciatedUserIds;

		if ((appreciatedUserIds != null) && (appreciatedUserIds.length() == 0)) {
			lessonCacheModel.appreciatedUserIds = null;
		}

		lessonCacheModel.appreciateCount = getAppreciateCount();

		Date uploadedTime = getUploadedTime();

		if (uploadedTime != null) {
			lessonCacheModel.uploadedTime = uploadedTime.getTime();
		}
		else {
			lessonCacheModel.uploadedTime = Long.MIN_VALUE;
		}

		lessonCacheModel.uploadedById = getUploadedById();

		lessonCacheModel.uploadedByName = getUploadedByName();

		String uploadedByName = lessonCacheModel.uploadedByName;

		if ((uploadedByName != null) && (uploadedByName.length() == 0)) {
			lessonCacheModel.uploadedByName = null;
		}

		lessonCacheModel.lessonNote = getLessonNote();

		String lessonNote = lessonCacheModel.lessonNote;

		if ((lessonNote != null) && (lessonNote.length() == 0)) {
			lessonCacheModel.lessonNote = null;
		}

		lessonCacheModel.status = getStatus();

		String status = lessonCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			lessonCacheModel.status = null;
		}

		lessonCacheModel.requestLessonId = getRequestLessonId();

		lessonCacheModel.lessonPrivacy = getLessonPrivacy();

		String lessonPrivacy = lessonCacheModel.lessonPrivacy;

		if ((lessonPrivacy != null) && (lessonPrivacy.length() == 0)) {
			lessonCacheModel.lessonPrivacy = null;
		}

		lessonCacheModel.featured = getFeatured();

		lessonCacheModel.creator = getCreator();

		String creator = lessonCacheModel.creator;

		if ((creator != null) && (creator.length() == 0)) {
			lessonCacheModel.creator = null;
		}

		lessonCacheModel.secondaryAuthor = getSecondaryAuthor();

		String secondaryAuthor = lessonCacheModel.secondaryAuthor;

		if ((secondaryAuthor != null) && (secondaryAuthor.length() == 0)) {
			lessonCacheModel.secondaryAuthor = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			lessonCacheModel.createDate = createDate.getTime();
		}
		else {
			lessonCacheModel.createDate = Long.MIN_VALUE;
		}

		lessonCacheModel.createBy = getCreateBy();

		Date updatedDate = getUpdatedDate();

		if (updatedDate != null) {
			lessonCacheModel.updatedDate = updatedDate.getTime();
		}
		else {
			lessonCacheModel.updatedDate = Long.MIN_VALUE;
		}

		lessonCacheModel.updatedBy = getUpdatedBy();

		lessonCacheModel.permission = getPermission();

		String permission = lessonCacheModel.permission;

		if ((permission != null) && (permission.length() == 0)) {
			lessonCacheModel.permission = null;
		}

		lessonCacheModel.markedAs = getMarkedAs();

		String markedAs = lessonCacheModel.markedAs;

		if ((markedAs != null) && (markedAs.length() == 0)) {
			lessonCacheModel.markedAs = null;
		}

		lessonCacheModel.markedBy = getMarkedBy();

		lessonCacheModel.markedContent = getMarkedContent();

		String markedContent = lessonCacheModel.markedContent;

		if ((markedContent != null) && (markedContent.length() == 0)) {
			lessonCacheModel.markedContent = null;
		}

		lessonCacheModel.currentAuthor = getCurrentAuthor();

		lessonCacheModel.shareWithProfile = getShareWithProfile();

		lessonCacheModel.publishWithProfile = getPublishWithProfile();

		lessonCacheModel.publishedProfile = getPublishedProfile();

		String publishedProfile = lessonCacheModel.publishedProfile;

		if ((publishedProfile != null) && (publishedProfile.length() == 0)) {
			lessonCacheModel.publishedProfile = null;
		}

		lessonCacheModel.version = getVersion();

		lessonCacheModel.lessonStatus = getLessonStatus();

		lessonCacheModel.statusByUserId = getStatusByUserId();

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			lessonCacheModel.statusDate = statusDate.getTime();
		}
		else {
			lessonCacheModel.statusDate = Long.MIN_VALUE;
		}

		return lessonCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(73);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", lessonId=");
		sb.append(getLessonId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", lessonName=");
		sb.append(getLessonName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", author=");
		sb.append(getAuthor());
		sb.append(", courseId=");
		sb.append(getCourseId());
		sb.append(", appreciatedUserIds=");
		sb.append(getAppreciatedUserIds());
		sb.append(", appreciateCount=");
		sb.append(getAppreciateCount());
		sb.append(", uploadedTime=");
		sb.append(getUploadedTime());
		sb.append(", uploadedById=");
		sb.append(getUploadedById());
		sb.append(", uploadedByName=");
		sb.append(getUploadedByName());
		sb.append(", lessonNote=");
		sb.append(getLessonNote());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", requestLessonId=");
		sb.append(getRequestLessonId());
		sb.append(", lessonPrivacy=");
		sb.append(getLessonPrivacy());
		sb.append(", featured=");
		sb.append(getFeatured());
		sb.append(", creator=");
		sb.append(getCreator());
		sb.append(", secondaryAuthor=");
		sb.append(getSecondaryAuthor());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", createBy=");
		sb.append(getCreateBy());
		sb.append(", updatedDate=");
		sb.append(getUpdatedDate());
		sb.append(", updatedBy=");
		sb.append(getUpdatedBy());
		sb.append(", permission=");
		sb.append(getPermission());
		sb.append(", markedAs=");
		sb.append(getMarkedAs());
		sb.append(", markedBy=");
		sb.append(getMarkedBy());
		sb.append(", markedContent=");
		sb.append(getMarkedContent());
		sb.append(", currentAuthor=");
		sb.append(getCurrentAuthor());
		sb.append(", shareWithProfile=");
		sb.append(getShareWithProfile());
		sb.append(", publishWithProfile=");
		sb.append(getPublishWithProfile());
		sb.append(", publishedProfile=");
		sb.append(getPublishedProfile());
		sb.append(", version=");
		sb.append(getVersion());
		sb.append(", lessonStatus=");
		sb.append(getLessonStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(112);

		sb.append("<model><model-name>");
		sb.append("com.nyu.model.Lesson");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lessonId</column-name><column-value><![CDATA[");
		sb.append(getLessonId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lessonName</column-name><column-value><![CDATA[");
		sb.append(getLessonName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>author</column-name><column-value><![CDATA[");
		sb.append(getAuthor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>courseId</column-name><column-value><![CDATA[");
		sb.append(getCourseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appreciatedUserIds</column-name><column-value><![CDATA[");
		sb.append(getAppreciatedUserIds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appreciateCount</column-name><column-value><![CDATA[");
		sb.append(getAppreciateCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uploadedTime</column-name><column-value><![CDATA[");
		sb.append(getUploadedTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uploadedById</column-name><column-value><![CDATA[");
		sb.append(getUploadedById());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uploadedByName</column-name><column-value><![CDATA[");
		sb.append(getUploadedByName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lessonNote</column-name><column-value><![CDATA[");
		sb.append(getLessonNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestLessonId</column-name><column-value><![CDATA[");
		sb.append(getRequestLessonId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lessonPrivacy</column-name><column-value><![CDATA[");
		sb.append(getLessonPrivacy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>featured</column-name><column-value><![CDATA[");
		sb.append(getFeatured());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creator</column-name><column-value><![CDATA[");
		sb.append(getCreator());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>secondaryAuthor</column-name><column-value><![CDATA[");
		sb.append(getSecondaryAuthor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createBy</column-name><column-value><![CDATA[");
		sb.append(getCreateBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedDate</column-name><column-value><![CDATA[");
		sb.append(getUpdatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>updatedBy</column-name><column-value><![CDATA[");
		sb.append(getUpdatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>permission</column-name><column-value><![CDATA[");
		sb.append(getPermission());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markedAs</column-name><column-value><![CDATA[");
		sb.append(getMarkedAs());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markedBy</column-name><column-value><![CDATA[");
		sb.append(getMarkedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>markedContent</column-name><column-value><![CDATA[");
		sb.append(getMarkedContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentAuthor</column-name><column-value><![CDATA[");
		sb.append(getCurrentAuthor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shareWithProfile</column-name><column-value><![CDATA[");
		sb.append(getShareWithProfile());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishWithProfile</column-name><column-value><![CDATA[");
		sb.append(getPublishWithProfile());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishedProfile</column-name><column-value><![CDATA[");
		sb.append(getPublishedProfile());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>version</column-name><column-value><![CDATA[");
		sb.append(getVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lessonStatus</column-name><column-value><![CDATA[");
		sb.append(getLessonStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Lesson.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Lesson.class };
	private String _uuid;
	private String _originalUuid;
	private long _lessonId;
	private long _originalLessonId;
	private boolean _setOriginalLessonId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private String _lessonName;
	private String _lessonNameCurrentLanguageId;
	private String _originalLessonName;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private long _author;
	private String _courseId;
	private String _appreciatedUserIds;
	private int _appreciateCount;
	private Date _uploadedTime;
	private long _uploadedById;
	private String _uploadedByName;
	private String _lessonNote;
	private String _status;
	private String _originalStatus;
	private long _requestLessonId;
	private String _lessonPrivacy;
	private String _originalLessonPrivacy;
	private boolean _featured;
	private String _creator;
	private String _creatorCurrentLanguageId;
	private String _secondaryAuthor;
	private Date _createDate;
	private long _createBy;
	private Date _updatedDate;
	private long _updatedBy;
	private String _permission;
	private String _markedAs;
	private String _originalMarkedAs;
	private long _markedBy;
	private String _markedContent;
	private long _currentAuthor;
	private long _originalCurrentAuthor;
	private boolean _setOriginalCurrentAuthor;
	private long _shareWithProfile;
	private long _publishWithProfile;
	private String _publishedProfile;
	private double _version;
	private int _lessonStatus;
	private int _originalLessonStatus;
	private boolean _setOriginalLessonStatus;
	private long _statusByUserId;
	private String _statusByUserUuid;
	private Date _statusDate;
	private long _columnBitmask;
	private Lesson _escapedModel;
}