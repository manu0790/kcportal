/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.nyu.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.nyu.model.RequestLesson;
import com.nyu.model.RequestLessonModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the RequestLesson service. Represents a row in the &quot;nyyou_RequestLesson&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.nyu.model.RequestLessonModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RequestLessonImpl}.
 * </p>
 *
 * @author Allwins Rajaiah
 * @see RequestLessonImpl
 * @see com.nyu.model.RequestLesson
 * @see com.nyu.model.RequestLessonModel
 * @generated
 */
public class RequestLessonModelImpl extends BaseModelImpl<RequestLesson>
	implements RequestLessonModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a request lesson model instance should use the {@link com.nyu.model.RequestLesson} interface instead.
	 */
	public static final String TABLE_NAME = "nyyou_RequestLesson";
	public static final Object[][] TABLE_COLUMNS = {
			{ "requestLessonId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "relatedLink", Types.VARCHAR },
			{ "priority", Types.BOOLEAN },
			{ "createdBy", Types.BIGINT },
			{ "createdDate", Types.TIMESTAMP },
			{ "acceptedBy", Types.BIGINT },
			{ "status", Types.VARCHAR },
			{ "appreciatedUserIds", Types.VARCHAR },
			{ "lastActivity", Types.TIMESTAMP },
			{ "acceptedNote", Types.VARCHAR },
			{ "answerType", Types.VARCHAR },
			{ "sendTo", Types.BIGINT },
			{ "opnionSurveyLink", Types.VARCHAR },
			{ "surveyOptions", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table nyyou_RequestLesson (requestLessonId LONG not null primary key IDENTITY,companyId LONG,groupId LONG,name VARCHAR(1000) null,description STRING null,relatedLink VARCHAR(75) null,priority BOOLEAN,createdBy LONG,createdDate DATE null,acceptedBy LONG,status VARCHAR(75) null,appreciatedUserIds TEXT null,lastActivity DATE null,acceptedNote STRING null,answerType VARCHAR(75) null,sendTo LONG,opnionSurveyLink VARCHAR(75) null,surveyOptions TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table nyyou_RequestLesson";
	public static final String ORDER_BY_JPQL = " ORDER BY requestLesson.createdDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY nyyou_RequestLesson.createdDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.nyu.model.RequestLesson"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.nyu.model.RequestLesson"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.nyu.model.RequestLesson"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long CREATEDDATE_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.nyu.model.RequestLesson"));

	public RequestLessonModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _requestLessonId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRequestLessonId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _requestLessonId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RequestLesson.class;
	}

	@Override
	public String getModelClassName() {
		return RequestLesson.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("requestLessonId", getRequestLessonId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("name", getName());
		attributes.put("description", getDescription());
		attributes.put("relatedLink", getRelatedLink());
		attributes.put("priority", getPriority());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("acceptedBy", getAcceptedBy());
		attributes.put("status", getStatus());
		attributes.put("appreciatedUserIds", getAppreciatedUserIds());
		attributes.put("lastActivity", getLastActivity());
		attributes.put("acceptedNote", getAcceptedNote());
		attributes.put("answerType", getAnswerType());
		attributes.put("sendTo", getSendTo());
		attributes.put("opnionSurveyLink", getOpnionSurveyLink());
		attributes.put("surveyOptions", getSurveyOptions());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long requestLessonId = (Long)attributes.get("requestLessonId");

		if (requestLessonId != null) {
			setRequestLessonId(requestLessonId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String relatedLink = (String)attributes.get("relatedLink");

		if (relatedLink != null) {
			setRelatedLink(relatedLink);
		}

		Boolean priority = (Boolean)attributes.get("priority");

		if (priority != null) {
			setPriority(priority);
		}

		Long createdBy = (Long)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Long acceptedBy = (Long)attributes.get("acceptedBy");

		if (acceptedBy != null) {
			setAcceptedBy(acceptedBy);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String appreciatedUserIds = (String)attributes.get("appreciatedUserIds");

		if (appreciatedUserIds != null) {
			setAppreciatedUserIds(appreciatedUserIds);
		}

		Date lastActivity = (Date)attributes.get("lastActivity");

		if (lastActivity != null) {
			setLastActivity(lastActivity);
		}

		String acceptedNote = (String)attributes.get("acceptedNote");

		if (acceptedNote != null) {
			setAcceptedNote(acceptedNote);
		}

		String answerType = (String)attributes.get("answerType");

		if (answerType != null) {
			setAnswerType(answerType);
		}

		Long sendTo = (Long)attributes.get("sendTo");

		if (sendTo != null) {
			setSendTo(sendTo);
		}

		String opnionSurveyLink = (String)attributes.get("opnionSurveyLink");

		if (opnionSurveyLink != null) {
			setOpnionSurveyLink(opnionSurveyLink);
		}

		String surveyOptions = (String)attributes.get("surveyOptions");

		if (surveyOptions != null) {
			setSurveyOptions(surveyOptions);
		}
	}

	@Override
	public long getRequestLessonId() {
		return _requestLessonId;
	}

	@Override
	public void setRequestLessonId(long requestLessonId) {
		_requestLessonId = requestLessonId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	@Override
	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	@Override
	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	@Override
	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getDescription(), languageId,
			useDefault);
	}

	@Override
	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	@Override
	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setDescription(String description, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	@Override
	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getDefault());
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap,
		Locale defaultLocale) {
		if (descriptionMap == null) {
			return;
		}

		setDescription(LocalizationUtil.updateLocalization(descriptionMap,
				getDescription(), "Description",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getRelatedLink() {
		if (_relatedLink == null) {
			return StringPool.BLANK;
		}
		else {
			return _relatedLink;
		}
	}

	@Override
	public void setRelatedLink(String relatedLink) {
		_relatedLink = relatedLink;
	}

	@Override
	public boolean getPriority() {
		return _priority;
	}

	@Override
	public boolean isPriority() {
		return _priority;
	}

	@Override
	public void setPriority(boolean priority) {
		_priority = priority;
	}

	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_columnBitmask = -1L;

		if (_originalCreatedDate == null) {
			_originalCreatedDate = _createdDate;
		}

		_createdDate = createdDate;
	}

	public Date getOriginalCreatedDate() {
		return _originalCreatedDate;
	}

	@Override
	public long getAcceptedBy() {
		return _acceptedBy;
	}

	@Override
	public void setAcceptedBy(long acceptedBy) {
		_acceptedBy = acceptedBy;
	}

	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_status = status;
	}

	@Override
	public String getAppreciatedUserIds() {
		if (_appreciatedUserIds == null) {
			return StringPool.BLANK;
		}
		else {
			return _appreciatedUserIds;
		}
	}

	@Override
	public void setAppreciatedUserIds(String appreciatedUserIds) {
		_appreciatedUserIds = appreciatedUserIds;
	}

	@Override
	public Date getLastActivity() {
		return _lastActivity;
	}

	@Override
	public void setLastActivity(Date lastActivity) {
		_lastActivity = lastActivity;
	}

	@Override
	public String getAcceptedNote() {
		if (_acceptedNote == null) {
			return StringPool.BLANK;
		}
		else {
			return _acceptedNote;
		}
	}

	@Override
	public String getAcceptedNote(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAcceptedNote(languageId);
	}

	@Override
	public String getAcceptedNote(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getAcceptedNote(languageId, useDefault);
	}

	@Override
	public String getAcceptedNote(String languageId) {
		return LocalizationUtil.getLocalization(getAcceptedNote(), languageId);
	}

	@Override
	public String getAcceptedNote(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getAcceptedNote(), languageId,
			useDefault);
	}

	@Override
	public String getAcceptedNoteCurrentLanguageId() {
		return _acceptedNoteCurrentLanguageId;
	}

	@JSON
	@Override
	public String getAcceptedNoteCurrentValue() {
		Locale locale = getLocale(_acceptedNoteCurrentLanguageId);

		return getAcceptedNote(locale);
	}

	@Override
	public Map<Locale, String> getAcceptedNoteMap() {
		return LocalizationUtil.getLocalizationMap(getAcceptedNote());
	}

	@Override
	public void setAcceptedNote(String acceptedNote) {
		_acceptedNote = acceptedNote;
	}

	@Override
	public void setAcceptedNote(String acceptedNote, Locale locale) {
		setAcceptedNote(acceptedNote, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setAcceptedNote(String acceptedNote, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(acceptedNote)) {
			setAcceptedNote(LocalizationUtil.updateLocalization(
					getAcceptedNote(), "AcceptedNote", acceptedNote,
					languageId, defaultLanguageId));
		}
		else {
			setAcceptedNote(LocalizationUtil.removeLocalization(
					getAcceptedNote(), "AcceptedNote", languageId));
		}
	}

	@Override
	public void setAcceptedNoteCurrentLanguageId(String languageId) {
		_acceptedNoteCurrentLanguageId = languageId;
	}

	@Override
	public void setAcceptedNoteMap(Map<Locale, String> acceptedNoteMap) {
		setAcceptedNoteMap(acceptedNoteMap, LocaleUtil.getDefault());
	}

	@Override
	public void setAcceptedNoteMap(Map<Locale, String> acceptedNoteMap,
		Locale defaultLocale) {
		if (acceptedNoteMap == null) {
			return;
		}

		setAcceptedNote(LocalizationUtil.updateLocalization(acceptedNoteMap,
				getAcceptedNote(), "AcceptedNote",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getAnswerType() {
		if (_answerType == null) {
			return StringPool.BLANK;
		}
		else {
			return _answerType;
		}
	}

	@Override
	public void setAnswerType(String answerType) {
		_answerType = answerType;
	}

	@Override
	public long getSendTo() {
		return _sendTo;
	}

	@Override
	public void setSendTo(long sendTo) {
		_sendTo = sendTo;
	}

	@Override
	public String getOpnionSurveyLink() {
		if (_opnionSurveyLink == null) {
			return StringPool.BLANK;
		}
		else {
			return _opnionSurveyLink;
		}
	}

	@Override
	public void setOpnionSurveyLink(String opnionSurveyLink) {
		_opnionSurveyLink = opnionSurveyLink;
	}

	@Override
	public String getSurveyOptions() {
		if (_surveyOptions == null) {
			return StringPool.BLANK;
		}
		else {
			return _surveyOptions;
		}
	}

	@Override
	public void setSurveyOptions(String surveyOptions) {
		_surveyOptions = surveyOptions;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			RequestLesson.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> descriptionMap = getDescriptionMap();

		for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> acceptedNoteMap = getAcceptedNoteMap();

		for (Map.Entry<Locale, String> entry : acceptedNoteMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getDescription();

		if (xml == null) {
			return StringPool.BLANK;
		}

		return LocalizationUtil.getDefaultLanguageId(xml);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String description = getDescription(defaultLocale);

		if (Validator.isNull(description)) {
			setDescription(getDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDescription(getDescription(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String acceptedNote = getAcceptedNote(defaultLocale);

		if (Validator.isNull(acceptedNote)) {
			setAcceptedNote(getAcceptedNote(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setAcceptedNote(getAcceptedNote(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public RequestLesson toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RequestLesson)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RequestLessonImpl requestLessonImpl = new RequestLessonImpl();

		requestLessonImpl.setRequestLessonId(getRequestLessonId());
		requestLessonImpl.setCompanyId(getCompanyId());
		requestLessonImpl.setGroupId(getGroupId());
		requestLessonImpl.setName(getName());
		requestLessonImpl.setDescription(getDescription());
		requestLessonImpl.setRelatedLink(getRelatedLink());
		requestLessonImpl.setPriority(getPriority());
		requestLessonImpl.setCreatedBy(getCreatedBy());
		requestLessonImpl.setCreatedDate(getCreatedDate());
		requestLessonImpl.setAcceptedBy(getAcceptedBy());
		requestLessonImpl.setStatus(getStatus());
		requestLessonImpl.setAppreciatedUserIds(getAppreciatedUserIds());
		requestLessonImpl.setLastActivity(getLastActivity());
		requestLessonImpl.setAcceptedNote(getAcceptedNote());
		requestLessonImpl.setAnswerType(getAnswerType());
		requestLessonImpl.setSendTo(getSendTo());
		requestLessonImpl.setOpnionSurveyLink(getOpnionSurveyLink());
		requestLessonImpl.setSurveyOptions(getSurveyOptions());

		requestLessonImpl.resetOriginalValues();

		return requestLessonImpl;
	}

	@Override
	public int compareTo(RequestLesson requestLesson) {
		int value = 0;

		value = DateUtil.compareTo(getCreatedDate(),
				requestLesson.getCreatedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RequestLesson)) {
			return false;
		}

		RequestLesson requestLesson = (RequestLesson)obj;

		long primaryKey = requestLesson.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		RequestLessonModelImpl requestLessonModelImpl = this;

		requestLessonModelImpl._originalCompanyId = requestLessonModelImpl._companyId;

		requestLessonModelImpl._setOriginalCompanyId = false;

		requestLessonModelImpl._originalCreatedDate = requestLessonModelImpl._createdDate;

		requestLessonModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RequestLesson> toCacheModel() {
		RequestLessonCacheModel requestLessonCacheModel = new RequestLessonCacheModel();

		requestLessonCacheModel.requestLessonId = getRequestLessonId();

		requestLessonCacheModel.companyId = getCompanyId();

		requestLessonCacheModel.groupId = getGroupId();

		requestLessonCacheModel.name = getName();

		String name = requestLessonCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			requestLessonCacheModel.name = null;
		}

		requestLessonCacheModel.description = getDescription();

		String description = requestLessonCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			requestLessonCacheModel.description = null;
		}

		requestLessonCacheModel.relatedLink = getRelatedLink();

		String relatedLink = requestLessonCacheModel.relatedLink;

		if ((relatedLink != null) && (relatedLink.length() == 0)) {
			requestLessonCacheModel.relatedLink = null;
		}

		requestLessonCacheModel.priority = getPriority();

		requestLessonCacheModel.createdBy = getCreatedBy();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			requestLessonCacheModel.createdDate = createdDate.getTime();
		}
		else {
			requestLessonCacheModel.createdDate = Long.MIN_VALUE;
		}

		requestLessonCacheModel.acceptedBy = getAcceptedBy();

		requestLessonCacheModel.status = getStatus();

		String status = requestLessonCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			requestLessonCacheModel.status = null;
		}

		requestLessonCacheModel.appreciatedUserIds = getAppreciatedUserIds();

		String appreciatedUserIds = requestLessonCacheModel.appreciatedUserIds;

		if ((appreciatedUserIds != null) && (appreciatedUserIds.length() == 0)) {
			requestLessonCacheModel.appreciatedUserIds = null;
		}

		Date lastActivity = getLastActivity();

		if (lastActivity != null) {
			requestLessonCacheModel.lastActivity = lastActivity.getTime();
		}
		else {
			requestLessonCacheModel.lastActivity = Long.MIN_VALUE;
		}

		requestLessonCacheModel.acceptedNote = getAcceptedNote();

		String acceptedNote = requestLessonCacheModel.acceptedNote;

		if ((acceptedNote != null) && (acceptedNote.length() == 0)) {
			requestLessonCacheModel.acceptedNote = null;
		}

		requestLessonCacheModel.answerType = getAnswerType();

		String answerType = requestLessonCacheModel.answerType;

		if ((answerType != null) && (answerType.length() == 0)) {
			requestLessonCacheModel.answerType = null;
		}

		requestLessonCacheModel.sendTo = getSendTo();

		requestLessonCacheModel.opnionSurveyLink = getOpnionSurveyLink();

		String opnionSurveyLink = requestLessonCacheModel.opnionSurveyLink;

		if ((opnionSurveyLink != null) && (opnionSurveyLink.length() == 0)) {
			requestLessonCacheModel.opnionSurveyLink = null;
		}

		requestLessonCacheModel.surveyOptions = getSurveyOptions();

		String surveyOptions = requestLessonCacheModel.surveyOptions;

		if ((surveyOptions != null) && (surveyOptions.length() == 0)) {
			requestLessonCacheModel.surveyOptions = null;
		}

		return requestLessonCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{requestLessonId=");
		sb.append(getRequestLessonId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", relatedLink=");
		sb.append(getRelatedLink());
		sb.append(", priority=");
		sb.append(getPriority());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", acceptedBy=");
		sb.append(getAcceptedBy());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", appreciatedUserIds=");
		sb.append(getAppreciatedUserIds());
		sb.append(", lastActivity=");
		sb.append(getLastActivity());
		sb.append(", acceptedNote=");
		sb.append(getAcceptedNote());
		sb.append(", answerType=");
		sb.append(getAnswerType());
		sb.append(", sendTo=");
		sb.append(getSendTo());
		sb.append(", opnionSurveyLink=");
		sb.append(getOpnionSurveyLink());
		sb.append(", surveyOptions=");
		sb.append(getSurveyOptions());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append("com.nyu.model.RequestLesson");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>requestLessonId</column-name><column-value><![CDATA[");
		sb.append(getRequestLessonId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>relatedLink</column-name><column-value><![CDATA[");
		sb.append(getRelatedLink());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priority</column-name><column-value><![CDATA[");
		sb.append(getPriority());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>acceptedBy</column-name><column-value><![CDATA[");
		sb.append(getAcceptedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appreciatedUserIds</column-name><column-value><![CDATA[");
		sb.append(getAppreciatedUserIds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastActivity</column-name><column-value><![CDATA[");
		sb.append(getLastActivity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>acceptedNote</column-name><column-value><![CDATA[");
		sb.append(getAcceptedNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>answerType</column-name><column-value><![CDATA[");
		sb.append(getAnswerType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sendTo</column-name><column-value><![CDATA[");
		sb.append(getSendTo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>opnionSurveyLink</column-name><column-value><![CDATA[");
		sb.append(getOpnionSurveyLink());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>surveyOptions</column-name><column-value><![CDATA[");
		sb.append(getSurveyOptions());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = RequestLesson.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			RequestLesson.class
		};
	private long _requestLessonId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private String _name;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private String _relatedLink;
	private boolean _priority;
	private long _createdBy;
	private Date _createdDate;
	private Date _originalCreatedDate;
	private long _acceptedBy;
	private String _status;
	private String _appreciatedUserIds;
	private Date _lastActivity;
	private String _acceptedNote;
	private String _acceptedNoteCurrentLanguageId;
	private String _answerType;
	private long _sendTo;
	private String _opnionSurveyLink;
	private String _surveyOptions;
	private long _columnBitmask;
	private RequestLesson _escapedModel;
}