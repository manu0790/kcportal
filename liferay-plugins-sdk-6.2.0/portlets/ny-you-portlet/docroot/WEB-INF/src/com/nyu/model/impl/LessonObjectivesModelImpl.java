/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.nyu.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.nyu.model.LessonObjectives;
import com.nyu.model.LessonObjectivesModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the LessonObjectives service. Represents a row in the &quot;nyyou_LessonObjectives&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.nyu.model.LessonObjectivesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LessonObjectivesImpl}.
 * </p>
 *
 * @author Allwins Rajaiah
 * @see LessonObjectivesImpl
 * @see com.nyu.model.LessonObjectives
 * @see com.nyu.model.LessonObjectivesModel
 * @generated
 */
public class LessonObjectivesModelImpl extends BaseModelImpl<LessonObjectives>
	implements LessonObjectivesModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a lesson objectives model instance should use the {@link com.nyu.model.LessonObjectives} interface instead.
	 */
	public static final String TABLE_NAME = "nyyou_LessonObjectives";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "lessonId", Types.BIGINT },
			{ "objective", Types.VARCHAR },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table nyyou_LessonObjectives (id_ LONG not null primary key IDENTITY,lessonId LONG,objective STRING null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table nyyou_LessonObjectives";
	public static final String ORDER_BY_JPQL = " ORDER BY lessonObjectives.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY nyyou_LessonObjectives.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.nyu.model.LessonObjectives"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.nyu.model.LessonObjectives"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.nyu.model.LessonObjectives"),
			true);
	public static long LESSONID_COLUMN_BITMASK = 1L;
	public static long ID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.nyu.model.LessonObjectives"));

	public LessonObjectivesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LessonObjectives.class;
	}

	@Override
	public String getModelClassName() {
		return LessonObjectives.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("lessonId", getLessonId());
		attributes.put("objective", getObjective());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long lessonId = (Long)attributes.get("lessonId");

		if (lessonId != null) {
			setLessonId(lessonId);
		}

		String objective = (String)attributes.get("objective");

		if (objective != null) {
			setObjective(objective);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getLessonId() {
		return _lessonId;
	}

	@Override
	public void setLessonId(long lessonId) {
		_columnBitmask |= LESSONID_COLUMN_BITMASK;

		if (!_setOriginalLessonId) {
			_setOriginalLessonId = true;

			_originalLessonId = _lessonId;
		}

		_lessonId = lessonId;
	}

	public long getOriginalLessonId() {
		return _originalLessonId;
	}

	@Override
	public String getObjective() {
		if (_objective == null) {
			return StringPool.BLANK;
		}
		else {
			return _objective;
		}
	}

	@Override
	public String getObjective(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getObjective(languageId);
	}

	@Override
	public String getObjective(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getObjective(languageId, useDefault);
	}

	@Override
	public String getObjective(String languageId) {
		return LocalizationUtil.getLocalization(getObjective(), languageId);
	}

	@Override
	public String getObjective(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getObjective(), languageId,
			useDefault);
	}

	@Override
	public String getObjectiveCurrentLanguageId() {
		return _objectiveCurrentLanguageId;
	}

	@JSON
	@Override
	public String getObjectiveCurrentValue() {
		Locale locale = getLocale(_objectiveCurrentLanguageId);

		return getObjective(locale);
	}

	@Override
	public Map<Locale, String> getObjectiveMap() {
		return LocalizationUtil.getLocalizationMap(getObjective());
	}

	@Override
	public void setObjective(String objective) {
		_objective = objective;
	}

	@Override
	public void setObjective(String objective, Locale locale) {
		setObjective(objective, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setObjective(String objective, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(objective)) {
			setObjective(LocalizationUtil.updateLocalization(getObjective(),
					"Objective", objective, languageId, defaultLanguageId));
		}
		else {
			setObjective(LocalizationUtil.removeLocalization(getObjective(),
					"Objective", languageId));
		}
	}

	@Override
	public void setObjectiveCurrentLanguageId(String languageId) {
		_objectiveCurrentLanguageId = languageId;
	}

	@Override
	public void setObjectiveMap(Map<Locale, String> objectiveMap) {
		setObjectiveMap(objectiveMap, LocaleUtil.getDefault());
	}

	@Override
	public void setObjectiveMap(Map<Locale, String> objectiveMap,
		Locale defaultLocale) {
		if (objectiveMap == null) {
			return;
		}

		setObjective(LocalizationUtil.updateLocalization(objectiveMap,
				getObjective(), "Objective",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LessonObjectives.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> objectiveMap = getObjectiveMap();

		for (Map.Entry<Locale, String> entry : objectiveMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getObjective();

		if (xml == null) {
			return StringPool.BLANK;
		}

		return LocalizationUtil.getDefaultLanguageId(xml);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String objective = getObjective(defaultLocale);

		if (Validator.isNull(objective)) {
			setObjective(getObjective(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setObjective(getObjective(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public LessonObjectives toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LessonObjectives)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LessonObjectivesImpl lessonObjectivesImpl = new LessonObjectivesImpl();

		lessonObjectivesImpl.setId(getId());
		lessonObjectivesImpl.setLessonId(getLessonId());
		lessonObjectivesImpl.setObjective(getObjective());
		lessonObjectivesImpl.setModifiedDate(getModifiedDate());

		lessonObjectivesImpl.resetOriginalValues();

		return lessonObjectivesImpl;
	}

	@Override
	public int compareTo(LessonObjectives lessonObjectives) {
		long primaryKey = lessonObjectives.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LessonObjectives)) {
			return false;
		}

		LessonObjectives lessonObjectives = (LessonObjectives)obj;

		long primaryKey = lessonObjectives.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LessonObjectivesModelImpl lessonObjectivesModelImpl = this;

		lessonObjectivesModelImpl._originalLessonId = lessonObjectivesModelImpl._lessonId;

		lessonObjectivesModelImpl._setOriginalLessonId = false;

		lessonObjectivesModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LessonObjectives> toCacheModel() {
		LessonObjectivesCacheModel lessonObjectivesCacheModel = new LessonObjectivesCacheModel();

		lessonObjectivesCacheModel.id = getId();

		lessonObjectivesCacheModel.lessonId = getLessonId();

		lessonObjectivesCacheModel.objective = getObjective();

		String objective = lessonObjectivesCacheModel.objective;

		if ((objective != null) && (objective.length() == 0)) {
			lessonObjectivesCacheModel.objective = null;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			lessonObjectivesCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			lessonObjectivesCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return lessonObjectivesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", lessonId=");
		sb.append(getLessonId());
		sb.append(", objective=");
		sb.append(getObjective());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.nyu.model.LessonObjectives");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lessonId</column-name><column-value><![CDATA[");
		sb.append(getLessonId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>objective</column-name><column-value><![CDATA[");
		sb.append(getObjective());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LessonObjectives.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			LessonObjectives.class
		};
	private long _id;
	private long _lessonId;
	private long _originalLessonId;
	private boolean _setOriginalLessonId;
	private String _objective;
	private String _objectiveCurrentLanguageId;
	private Date _modifiedDate;
	private long _columnBitmask;
	private LessonObjectives _escapedModel;
}